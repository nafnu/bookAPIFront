{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dctutor\\\\Desktop\\\\BackEnd\\\\bookAPI2\\\\front-end\\\\src\\\\components\\\\Books.js\";\n//component to view all dogs\nimport React from \"react\";\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Books extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      books: [],\n      isLoaded: true\n    };\n  }\n\n  componentDidMount() {\n    axios.get('/book').then(response => {\n      this.setState({\n        books: response.data,\n        isLoaded: true\n      });\n    }).catch(error => {\n      // handle error \n      // in case we get an error from the server, e.g. the server is offline\n      this.setState({\n        isLoaded: false,\n        error\n      });\n    });\n  }\n\n  render() {\n    //assign variables using the state\n    const {\n      isLoaded,\n      error,\n      books\n    } = this.state; // also render this if the SERVER is offline\n\n    if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"The page is loading or the SERVER is down...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this); //render this part of code if we received the data from the server\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default Books;","map":{"version":3,"sources":["C:/Users/dctutor/Desktop/BackEnd/bookAPI2/front-end/src/components/Books.js"],"names":["React","Link","axios","Books","Component","constructor","props","state","books","isLoaded","componentDidMount","get","then","response","setState","data","catch","error","render"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAGA,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAmC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAKH;;AAEDC,EAAAA,iBAAiB,GAAE;AAEfR,IAAAA,KAAK,CAACS,GAAN,CAAU,OAAV,EACKC,IADL,CACWC,QAAD,IAAc;AAEhB,WAAKC,QAAL,CAAe;AACXN,QAAAA,KAAK,EAAEK,QAAQ,CAACE,IADL;AAEXN,QAAAA,QAAQ,EAAE;AAFC,OAAf;AAKH,KARL,EASKO,KATL,CASYC,KAAD,IAAU;AACjB;AACA;AACI,WAAKH,QAAL,CAAc;AACVL,QAAAA,QAAQ,EAAC,KADC;AAEVQ,QAAAA;AAFU,OAAd;AAKH,KAjBL;AAoBH;;AAGDC,EAAAA,MAAM,GAAE;AACJ;AACA,UAAM;AAAET,MAAAA,QAAF;AAAYQ,MAAAA,KAAZ;AAAmBT,MAAAA;AAAnB,QAA4B,KAAKD,KAAvC,CAFI,CAKJ;;AACA,QAAG,CAACE,QAAJ,EAAa;AACT,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADS,CAIb;AACC,KALD,MAKO;AACH,0BACI;AAAA;AAAA;AAAA;AAAA,cADJ;AA6BH;AACJ;;AA7E8B;;AAiFnC,eAAeN,KAAf","sourcesContent":["//component to view all dogs\r\nimport React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Books extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          books: [],\r\n          isLoaded: true\r\n        }\r\n     \r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        axios.get('/book')\r\n            .then((response) => {\r\n           \r\n                this.setState( {\r\n                    books: response.data,\r\n                    isLoaded: true\r\n                })\r\n                \r\n            })\r\n            .catch((error)=> {\r\n            // handle error \r\n            // in case we get an error from the server, e.g. the server is offline\r\n                this.setState({\r\n                    isLoaded:false,\r\n                    error\r\n                })\r\n                \r\n            })\r\n       \r\n           \r\n    }\r\n\r\n\r\n    render(){\r\n        //assign variables using the state\r\n        const { isLoaded, error, books} = this.state;\r\n        \r\n      \r\n        // also render this if the SERVER is offline\r\n        if(!isLoaded){\r\n            return(\r\n                <div>The page is loading or the SERVER is down...</div>\r\n            )\r\n        //render this part of code if we received the data from the server\r\n        } else {\r\n            return(\r\n                <div>\r\n                    {/* <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Title</th>\r\n                                <th>Author</th>\r\n                                <th>ISBN</th>\r\n                                <th>Year Publication</th>\r\n                                <th>Publishing House</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {books.map(book => (\r\n                            <tr key={book._id}>\r\n                                <td>{book._id}</td>\r\n                                <td>{book.title}</td>\r\n                                <td >{book.author}</td>\r\n                                <td >{book.ISBN}</td>\r\n                                <td >{book.yearPublication}</td>\r\n                                <td >{book.publishingHouse}</td>\r\n                        </tr>\r\n                        ))}\r\n                        </tbody> \r\n                    </table> */}\r\n              </div>  \r\n            )\r\n        }\r\n    }\r\n}\r\n    \r\n\r\nexport default Books;"]},"metadata":{},"sourceType":"module"}